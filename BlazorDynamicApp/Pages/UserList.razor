@inject NavigationManager _navigationManager
@inject UserManager<ApplicationUser> _userManager
@inject IHttpContextAccessor IHttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPermissionService _permissionService
@inject IUserService _userService
@page "/users"
@attribute [Authorize]


<PageTitle>Users</PageTitle>

<div class="rz-m-12">
	<RadzenBreadCrumb>
		<RadzenBreadCrumbItem Path="/" Text="Index" />
		<RadzenBreadCrumbItem Path="/users" Text="Users" />
	</RadzenBreadCrumb>
</div>

<AuthorizeView Policy="CanCreateUserPolicy">
	<RadzenButton Click=@(args => CreateUser()) Icon="add_circle" ButtonStyle="ButtonStyle.Secondary">Create User</RadzenButton>
</AuthorizeView>

<AuthorizeView Policy="CanViewUserPolicy">
	<Authorized>
		@if (users.Count > 0)
		{
			<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H2" class="rz-my-6">Users </RadzenText>
			<RadzenDataGrid AllowVirtualization="true" @ref="grid" Data=@users class="rz-w-50" GridLines="DataGridGridLines.Both"
							AllowFiltering="false" AllowPaging="true" AllowSorting="true" ColumnWidth="620px">
				<Columns>
					@* <RadzenDataGridColumn Property="Id" Title="Id">
				</RadzenDataGridColumn> *@
					<RadzenDataGridColumn Title="User Name" Property="UserName">
					</RadzenDataGridColumn>
					@* <RadzenDataGridColumn Title="User Email" Property="Email">
				</RadzenDataGridColumn> *@
					<RadzenDataGridColumn Width="160px" Title="Actions">
						<Template Context="grid">
							<RadzenSplitButton Click=@(args => OnClick(args, grid)) AlwaysOpenPopup=true Text="Actions" Shade="Shade.Light">
								<ChildContent>
									<RadzenSplitButtonItem Text="Permissions" Value="1" Icon="list" IconColor="#14A44D"
														   onmouseover="this.style.backgroundColor='#14A44D'; this.style.color='white';"
														   onmouseout="this.style.backgroundColor='white'; this.style.color='black';" />
									<RadzenSplitButtonItem Text="Roles" Value="2" Icon="person" IconColor="#54B4D3"
														   onmouseover="this.style.backgroundColor='#54B4D3'; this.style.color='white';"
														   onmouseout="this.style.backgroundColor='white'; this.style.color='black';" />
									<RadzenSplitButtonItem Text="Edit" Value="3" Icon="edit" IconColor="#E4A11B"
														   onmouseover="this.style.backgroundColor='#E4A11B'; this.style.color='white';"
														   onmouseout="this.style.backgroundColor='white'; this.style.color='black';" />
									<RadzenSplitButtonItem Text="Delete" Value="4" Icon="delete" IconColor="#DC4C64"
														   onmouseover="this.style.backgroundColor='#DC4C64'; this.style.color='white';"
														   onmouseout="this.style.backgroundColor='white'; this.style.color='black';" />
								</ChildContent>
							</RadzenSplitButton>
						</Template>
					</RadzenDataGridColumn>
				</Columns>
			</RadzenDataGrid>
		}
		else
		{
			<p><em>Loading...</em></p>
		}
	</Authorized>
	<NotAuthorized>
		<div class="alert alert-danger">
			<h3>Access Denied</h3>
			<p>You don't have permission to see this page</p>
		</div>
	</NotAuthorized>

</AuthorizeView>



@code {
	private string userName;
	private ApplicationUser userVisitor;

	RadzenDataGrid<ApplicationUser> grid;
	List<ApplicationUser> users = new List<ApplicationUser>();

	protected override async Task OnInitializedAsync()
	{
		userName = IHttpContextAccessor.HttpContext.User.Identity.Name;
		userVisitor = await _userManager.FindByNameAsync(userName);

		var hasPermission = await _permissionService.HasPermissionAsync(userVisitor, "View", ResourceType.User);
		if (!hasPermission)
		{
			_navigationManager.NavigateTo($"/access-denied");
		}

		users = await _userService.GetAllUserListAsync();
	}

	private void CreateUser()
	{
		_navigationManager.NavigateTo("/create-user");
	}
	private async void EditUser(ApplicationUser user)
	{
		var hasPermission = await _permissionService.HasPermissionAsync(userVisitor, "Edit", ResourceType.User);
		if (hasPermission)
		{
			_navigationManager.NavigateTo($"/edit-user/{user.Id}");
		}
		else
		{
			_navigationManager.NavigateTo($"/access-denied");
		}
	}

	private async void ViewPermissions(ApplicationUser user)
	{
		var hasPermission = await _permissionService.HasPermissionAsync(userVisitor, "ViewUserPermissions", ResourceType.User);
		if (hasPermission)
		{
			_navigationManager.NavigateTo($"/user-permission/{user.Id}");
		}
		else
		{
			_navigationManager.NavigateTo($"/access-denied");
		}
	}
	private async void ViewRoles(ApplicationUser user)
	{
		var hasPermission = await _permissionService.HasPermissionAsync(userVisitor, "ViewUserRoles", ResourceType.UserRole);
		if (hasPermission)
		{
			_navigationManager.NavigateTo($"/user-roles/{user.Id}");
		}
		else
		{
			_navigationManager.NavigateTo($"/access-denied");
		}

	}
	private async void DeleteUser(ApplicationUser user)
	{
		var hasPermission = await _permissionService.HasPermissionAsync(userVisitor, "Delete", ResourceType.User);
		if (hasPermission)
		{
			var result = await _userService.DeleteUserAsync(user);
			if (result)
			{
				_navigationManager.NavigateTo("/users", true);
			}
			else
			{
				_navigationManager.NavigateTo("/Error");
			}
		}
		else
		{
			_navigationManager.NavigateTo($"/access-denied");
		}

	}

	private void OnClick(RadzenSplitButtonItem item, ApplicationUser user)
	{
		if (item.Value == "1")
		{
			ViewPermissions(user);
		}
		else if (item.Value == "2")
		{
			ViewRoles(user);
		}
		else if (item.Value == "3")
		{
			EditUser(user);
		}
		else if (item.Value == "4")
		{
			DeleteUser(user);
		}
	}

}
