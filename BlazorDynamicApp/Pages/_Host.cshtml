@page "/"
@using Microsoft.AspNetCore.Components.Web
@using Radzen.Blazor
@namespace BlazorDynamicApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorDynamicApp.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <component type="typeof(RadzenTheme)" render-mode="ServerPrerendered" param-Theme="@("material")" />
    <style>
        .nested {
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script>
        /**
         * Toggle child checkboxes when the parent checkbox is changed
         */
        function toggleNested(parentCheckbox) {
            const nestedDiv = parentCheckbox.parentNode.nextElementSibling;
            if (nestedDiv) {
                const childCheckboxes = nestedDiv.querySelectorAll('.child-checkbox');
                childCheckboxes.forEach(child => {
                    child.checked = parentCheckbox.checked;
                });
            }
        }

        /**
         * Update the parent checkbox based on the state of child checkboxes
         */
        function updateParent(childCheckbox) {
            const parentDiv = childCheckbox.closest('.nested').previousElementSibling;
            const parentCheckbox = parentDiv.querySelector('.parent-checkbox');
            const siblingCheckboxes = childCheckbox.closest('.nested').querySelectorAll('.child-checkbox');

            // Check if all child checkboxes are selected
            const allChecked = Array.from(siblingCheckboxes).every(cb => cb.checked);

            // Check if at least one child checkbox is selected
            const someChecked = Array.from(siblingCheckboxes).some(cb => cb.checked);

            if (allChecked) {
                parentCheckbox.checked = true;
                parentCheckbox.indeterminate = false; // Fully checked
            } else if (someChecked) {
                parentCheckbox.checked = false;
                parentCheckbox.indeterminate = true; // Partial check
            } else {
                parentCheckbox.checked = false;
                parentCheckbox.indeterminate = false; // Unchecked
            }
        }
    </script>
</body>
</html>
