// <auto-generated />
using System;
using BlazorDynamicApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorDynamicApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121193409_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlazorDynamicApp.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "de820986-a707-4cc5-8306-776812617837",
                            ConcurrencyStamp = "f987a102-6617-4a41-942b-dd9e258f6c16",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "8815f0d6-db8e-4606-8acb-12844e7b796b",
                            ConcurrencyStamp = "d103e61f-4438-41ef-bc95-9bdb8c344cc4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "11c174c2-94cc-4615-8d46-4655dee45ea7",
                            ConcurrencyStamp = "9e58110b-d30c-4000-8a32-627b34669390",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7",
                            ConcurrencyStamp = "4f28d5f1-8ecd-4993-b87d-d78745c3a982",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("BlazorDynamicApp.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "256ac0cc-c4b0-458d-957d-24cbfd49225b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8c92822-49de-421e-ba52-4ba5c849564b",
                            Email = "pirmatovalisher000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER000@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER000@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7IXrzp305EfQ5vEBnuyZnNwVLlwDnvo0idTXy5HA5F5OzsED3ve7QpndZ0JzgMsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1cfbfd2-952d-4ec9-b675-ae1e64031fd1",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher000@gmail.com"
                        },
                        new
                        {
                            Id = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e53bc9fd-dad4-43cc-95fc-7aaba0db71df",
                            Email = "pirmatovalisher2000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER2000@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER2000@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJgIgueFytBstbyUKjMLmAWBiyKUBOxN4xILnOk/giL/B04p7rrDHHm0H+QG3rP7fA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7aecce23-896a-4cba-8fec-18933cba9cc5",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher2000@gmail.com"
                        },
                        new
                        {
                            Id = "d7ebd93d-0642-4ab9-8da3-4b6b2046e540",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88ef5b2c-1b9d-4070-97c7-1fd7dca0d75d",
                            Email = "pirmatovalisher0000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER0000@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER0000@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGnOkIyCqyUnGs14mersDVJfdvE5Ja5kUh3smc62qy3tSWUbofqZFLsKqQ2gigOUNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "845287f3-02d3-49ce-b28b-6a79dd2b84af",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher0000@gmail.com"
                        },
                        new
                        {
                            Id = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "631ed5f6-bbd2-4fbf-a5e1-80c6fcb1bd09",
                            Email = "pirmatovalisher@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGSkRRiqTNM8biSQQiQk0PNMKGN+4TTraNbmFL/8nJxP8E3nXkSe44GzJkktozXbSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abfacf88-faec-44d4-accc-c0a4a38ea02f",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlazorDynamicApp.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "256ac0cc-c4b0-458d-957d-24cbfd49225b",
                            RoleId = "de820986-a707-4cc5-8306-776812617837"
                        },
                        new
                        {
                            UserId = "256ac0cc-c4b0-458d-957d-24cbfd49225b",
                            RoleId = "8815f0d6-db8e-4606-8acb-12844e7b796b"
                        },
                        new
                        {
                            UserId = "256ac0cc-c4b0-458d-957d-24cbfd49225b",
                            RoleId = "11c174c2-94cc-4615-8d46-4655dee45ea7"
                        },
                        new
                        {
                            UserId = "256ac0cc-c4b0-458d-957d-24cbfd49225b",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            RoleId = "8815f0d6-db8e-4606-8acb-12844e7b796b"
                        },
                        new
                        {
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            RoleId = "11c174c2-94cc-4615-8d46-4655dee45ea7"
                        },
                        new
                        {
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "d7ebd93d-0642-4ab9-8da3-4b6b2046e540",
                            RoleId = "11c174c2-94cc-4615-8d46-4655dee45ea7"
                        },
                        new
                        {
                            UserId = "d7ebd93d-0642-4ab9-8da3-4b6b2046e540",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BlazorDynamicApp.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlazorDynamicApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlazorDynamicApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BlazorDynamicApp.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorDynamicApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlazorDynamicApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
